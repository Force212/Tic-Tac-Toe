// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const cells = document.querySelectorAll(".cell");
const statusText = document.getElementById("status");
const restartButton = document.getElementById("restart");
const gameOverMessage = document.getElementById("game-over-message");
let currentPlayer = "X";
let boardState = ["", "", "", "", "", "", "", "", ""];
let isGameActive = true;

// –ü–æ–±–µ–¥–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
const winningCombinations = [
    [0, 1, 2], // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6], // –í–µ—Ä—Ç–∏–∫–∞–ª—å
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8], // –î–∏–∞–≥–æ–Ω–∞–ª—å
    [2, 4, 6]
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function updateStatus(message) {
    statusText.textContent = message;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function checkWinner() {
    for (const combination of winningCombinations) {
        const [a, b, c] = combination;
        if (
            boardState[a] &&
            boardState[a] === boardState[b] &&
            boardState[a] === boardState[c]
        ) {
            isGameActive = false;
            updateStatus(`Player ${boardState[a]} wins! üéâ`);
            showGameOverMessage();
            return true;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
    if (!boardState.includes("")) {
        isGameActive = false;
        updateStatus("It's a tie! üòê");
        showGameOverMessage();
        return true;
    }

    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —è—á–µ–π–∫–∞–º
function handleCellClick(event) {
    const cell = event.target;
    const index = cell.getAttribute("data-index");

    if (boardState[index] || !isGameActive) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ –∏ —è—á–µ–π–∫–∏
    boardState[index] = currentPlayer;
    cell.classList.add(currentPlayer.toLowerCase());
    cell.textContent = currentPlayer;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (checkWinner()) return;

    // –ú–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
    currentPlayer = currentPlayer === "X" ? "O" : "X";
    updateStatus(`Player ${currentPlayer}'s turn`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function restartGame() {
    boardState = ["", "", "", "", "", "", "", "", ""];
    currentPlayer = "X";
    isGameActive = true;
    updateStatus(`Player ${currentPlayer}'s turn`);
    cells.forEach(cell => {
        cell.textContent = "";
        cell.classList.remove("x", "o");
    });
    hideGameOverMessage();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞ "–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã"
function showGameOverMessage() {
    gameOverMessage.classList.add("active");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ "–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã"
function hideGameOverMessage() {
    gameOverMessage.classList.remove("active");
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
cells.forEach(cell => cell.addEventListener("click", handleCellClick));
restartButton.addEventListener("click", restartGame);

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
updateStatus(`Player ${currentPlayer}'s turn`);